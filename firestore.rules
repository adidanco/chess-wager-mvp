rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access
    // match /{document=**} {
    //  allow read, write: if false;
    // }

    // Users Collection
    match /users/{userId} {
      // Allow reading own profile or if admin (future)
      allow read: if request.auth != null; // Simple MVP rule
      
      // Allow creating own profile
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // WARNING: INSECURE MVP RULE - Allows any authenticated user to update any user's fields (incl. balance).
      // REQUIRED for client-side balance updates in MVP phase.
      // MUST BE REPLACED with secure server-side logic (Cloud Functions) before production.
      allow update: if request.auth != null; 
    }

    // Rangvaar Games Collection
    match /rangvaarGames/{gameId} {
      // Allow reading any game if authenticated
      allow read: if request.auth != null;
      
      // Allow creating games if authenticated
      allow create: if request.auth != null;
      
      // Allow updating game state if authenticated (Needed for phase changes, card plays, payoutProcessed flag etc.)
      allow update: if request.auth != null; 
    }

    // Scambodia Games Collection
    match /scambodiaGames/{gameId} {
      // Allow reading any game if authenticated
      allow read: if request.auth != null;
      
      // Allow creating games if authenticated
      allow create: if request.auth != null;
      
      // Allow updating game state if authenticated (Needed for phase changes, card plays, etc.)
      allow update: if request.auth != null; 
    }

    // Transactions Collection (Example - adjust as needed)
    // Usually more restrictive - e.g., only create own transactions
    match /transactions/{transactionId} {
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update, delete: if false; // Generally don't allow client update/delete
    }
    
    // Add rules for other collections ('games'?) if needed
    match /games/{gameId} {
       allow read, write: if request.auth != null; // Example permissive rule if used
    }

  }
} 